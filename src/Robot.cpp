// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/IntakeArmLevel.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Shooter> Robot::shooter;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {

	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassis.reset(new Chassis());
    intake.reset(new Intake());
    shooter.reset(new Shooter());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	//RobotMap::shooterliftShooter->Set(DoubleSolenoid::kForward);
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
	//Setting starting values of Pneumatics......................
	RobotMap::chassisshift->Set(DoubleSolenoid::kReverse);
	RobotMap::shooterliftShooter->Set(DoubleSolenoid::kReverse);
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("Current: LeftChassis 1", RobotMap::chassisleftMotor1->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: LeftChassis 2", RobotMap::chassisleftMotor2->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: LeftChassis 3", RobotMap::chassisleftMotor3->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: RightChassis 1", RobotMap::chassisrightMotor1->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: RightChassis 1", RobotMap::chassisrightMotor2->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: RightChassis 1", RobotMap::chassisrightMotor3->GetOutputCurrent());
	SmartDashboard::PutNumber("Currrent:Shooter Roller", RobotMap::shooterrollerMotor->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Shooter Left", RobotMap::shootershooterMotor1->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Shooter Right", RobotMap::shootershooterMotor2->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Intake In", RobotMap::intakeintakeMotor1->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Intake Side", RobotMap::intakeintakeMotor2->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Intake Arm Right", RobotMap::intakeintakeMotor3->GetOutputCurrent());
	SmartDashboard::PutNumber("Current: Intake Arm Left", RobotMap::intakeintakeMotor4->GetOutputCurrent());

	SmartDashboard::PutNumber("IntakeMotor3 Pos", RobotMap::intakeintakeMotor3->GetPosition());
	SmartDashboard::PutNumber("IntakeMotor4 Pos", RobotMap::intakeintakeMotor4->GetPosition());

	SmartDashboard::PutNumber("IntakeMotor3 Pulse Width Pos", RobotMap::intakeintakeMotor3->GetPulseWidthPosition());
	SmartDashboard::PutNumber("IntakeMotor4 Pulse Width Pos", RobotMap::intakeintakeMotor4->GetPulseWidthPosition());

	SmartDashboard::PutNumber("IntakeMotor3 Enc Pos", RobotMap::intakeintakeMotor3->GetEncPosition());
	SmartDashboard::PutNumber("IntakeMotor4 Enc Pos", RobotMap::intakeintakeMotor4->GetEncPosition());

	SmartDashboard::PutNumber("Test Pos", RobotMap::shooterrollerMotor->GetPosition());
	SmartDashboard::PutNumber("Test Pulse Pos", RobotMap::shooterrollerMotor->GetPosition());
	SmartDashboard::PutNumber("Test Enc Pos", RobotMap::shooterrollerMotor->GetEncPosition());
	SmartDashboard::PutData("Arm Level 1", new IntakeArmLevel(1));
	SmartDashboard::PutData("Arm Level 2", new IntakeArmLevel(2));
	SmartDashboard::PutData("Arm Level 3", new IntakeArmLevel(3));



}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

