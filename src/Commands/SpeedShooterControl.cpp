#include "SpeedShooterControl.h"

SpeedShooterControl::SpeedShooterControl(double speed)
: Command(),
  mspeed(speed),
  count(0)
{
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
 
}

// Called just before this Command runs the first time
void SpeedShooterControl::Initialize() {
	RobotMap::shootershooterMotor1->SetControlMode(CANTalon::kSpeed);
	RobotMap::shootershooterMotor1->Set(0.0);
	RobotMap::shootershooterMotor2->SetControlMode(CANTalon::kSpeed);
	RobotMap::shootershooterMotor2->Set(0.0);
	count = 0;
}

// Called repeatedly when this Command is scheduled to run
void SpeedShooterControl::Execute() {
	RobotMap::shootershooterMotor1->Set(mspeed);
	RobotMap::shootershooterMotor2->Set(mspeed);
	count++;

}

// Make this return true when this Command no longer needs to run execute()
bool SpeedShooterControl::IsFinished() {
    return count == 10;
}

// Called once after isFinished returns true
void SpeedShooterControl::End() {
	RobotMap::shootershooterMotor1->SetControlMode(CANTalon::kPercentVbus);
	RobotMap::shootershooterMotor1->Set(0.0);
	RobotMap::shootershooterMotor2->SetControlMode(CANTalon::kPercentVbus);
	RobotMap::shootershooterMotor2->Set(0.0);

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SpeedShooterControl::Interrupted() {
	End();
}
