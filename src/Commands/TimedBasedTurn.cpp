// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TimedBasedTurn.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
TimedBasedTurn::TimedBasedTurn(){
	direction ='r';
}
TimedBasedTurn::TimedBasedTurn(char mdirection, double mspeed): Command() {
	direction = mdirection;
	speed = mspeed;
	// Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TimedBasedTurn::Initialize() {
	if (direction == 'r')
		{
			leftdirection = 1;
			rightdirection = -1;
		}
	else if (direction == 'l')
		{
			leftdirection = -1;
			rightdirection = 1;
		}

}

// Called repeatedly when this Command is scheduled to run
void TimedBasedTurn::Execute() {
	RobotMap::chassisleftMotor1->Set(leftdirection*speed);
	RobotMap::chassisleftMotor2->Set(leftdirection*speed);
	RobotMap::chassisleftMotor3->Set(leftdirection*speed);
	RobotMap::chassisrightMotor1->Set(rightdirection*speed);
	RobotMap::chassisrightMotor2->Set(rightdirection*speed);
	RobotMap::chassisrightMotor3->Set(rightdirection*speed);



}

// Make this return true when this Command no longer needs to run execute()
bool TimedBasedTurn::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void TimedBasedTurn::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TimedBasedTurn::Interrupted() {

}
