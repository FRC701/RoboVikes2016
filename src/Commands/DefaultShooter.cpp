// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DefaultShooter.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DefaultShooter::DefaultShooter(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DefaultShooter::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void DefaultShooter::Execute() {
    RobotMap::shooterRollerMotor->Set(0.0);

    RobotMap::shooterShooterMotor1->Set(0.0);
    RobotMap::shooterShooterMotor2->Set(0.0);

    //Check for button press then start counter

    if(Robot::oi->getdriver()->GetRawButton(1) && warmUpCounter == 0)       //Detect we want to shoot and the shooter isn't running
        startWarmUpCounter = true;

    if(Robot::oi->getdriver()->GetRawButton(1) && warmUpCounter > 20) {      //Detect we want to stop shooting
        RobotMap::shooterRollerMotor->Set(0.0);

        RobotMap::shooterShooterMotor1->Set(0.0);
        RobotMap::shooterShooterMotor2->Set(0.0);

        warmUpCounter = 0;
        shootCounter = 0;

        startWarmUpCounter = false;
        startShootCounter = false;

    }

    if(Robot::oi->getdriver()->GetRawAxis(6) && warmUpCounter > 100){       //Detect we want to shoot and loops have passed
        RobotMap::shooterRollerMotor->Set(1.0);
        startWarmUpCounter = false;
        startShootCounter = true;
    }

    if(startWarmUpCounter){                                                 //Start warming up shooter for x loops
        RobotMap::shooterShooterMotor1->Set(1.0);
        RobotMap::shooterShooterMotor2->Set(1.0);
        warmUpCounter++;
    }

    if(startShootCounter)                                                   //Start counter after shooting
        shootCounter++;

    if(shootCounter > 50){                                                  //After x loops of being shot reset everything
        RobotMap::shooterRollerMotor->Set(0.0);

        RobotMap::shooterShooterMotor1->Set(0.0);
        RobotMap::shooterShooterMotor2->Set(0.0);

        warmUpCounter = 0;
        shootCounter = 0;

        startWarmUpCounter = false;
        startShootCounter = false;
    }

}

// Make this return true when this Command no longer needs to run execute()
bool DefaultShooter::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DefaultShooter::End() {
    warmUpCounter = 0;
    shootCounter = 0;

    startWarmUpCounter = false;
    startShootCounter = false;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DefaultShooter::Interrupted() {
    warmUpCounter = 0;
    shootCounter = 0;

    startWarmUpCounter = false;
    startShootCounter = false;
}
