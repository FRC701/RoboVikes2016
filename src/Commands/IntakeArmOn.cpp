// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "IntakeArmOn.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

IntakeArmOn::IntakeArmOn(double speed_): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
	speed = speed_;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void IntakeArmOn::Initialize() {
	RobotMap::intakeintakeMotor3->SetControlMode(CANTalon::kPercentVbus);
	RobotMap::intakeintakeMotor4->SetControlMode(CANTalon::kPercentVbus);

}

// Called repeatedly when this Command is scheduled to run
void IntakeArmOn::Execute() {
	static int counter = 0;
	counter++;
	RobotMap::intakeintakeMotor3->Set(speed *-1);
	RobotMap::intakeintakeMotor4->Set(speed);
	SmartDashboard::PutNumber("Intake 3: Control Mode", RobotMap::intakeintakeMotor3->GetControlMode());
	SmartDashboard::PutNumber("Intake 4: Control", RobotMap::intakeintakeMotor4->GetControlMode());
	SmartDashboard::PutNumber("counter control mode", counter);
}

// Make this return true when this Command no longer needs to run execute()
bool IntakeArmOn::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void IntakeArmOn::End() {


}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void IntakeArmOn::Interrupted() {
	RobotMap::intakeintakeMotor3->Set(0.0);
	RobotMap::intakeintakeMotor4->Set(0.0);
	RobotMap::intakeintakeMotor3->SetControlMode(CANTalon::kPosition);
	RobotMap::intakeintakeMotor4->SetControlMode(CANTalon::kPosition);


}
