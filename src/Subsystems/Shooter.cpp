

#include "Shooter.h"
#include "../RobotMap.h"
#include "../Commands/DefaultShooter.h"

const int kDefaultPrepShooterSpeed = 6000;//4475;

Shooter::Shooter() :
		Subsystem("Shooter"),
		mprepShooterSpeed(kDefaultPrepShooterSpeed)
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooterMotor1 = RobotMap::shootershooterMotor1;
    shooterMotor2 = RobotMap::shootershooterMotor2;
    rollerMotor = RobotMap::shooterrollerMotor;
    liftShooter = RobotMap::shooterliftShooter;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    rollerMotor->ConfigLimitMode(CANTalon::kLimitMode_SrxDisableSwitchInputs);

    shooterMotor1->SetFeedbackDevice(CANTalon::CtreMagEncoder_Relative);
    shooterMotor1->SetSensorDirection(false);
    shooterMotor1->ConfigNominalOutputVoltage(+0.0, -0.0);
    shooterMotor1->ConfigPeakOutputVoltage(+12.0,-12.0);
    shooterMotor1->SelectProfileSlot(0);
    const double shooterMotor1_P = 0.06;
    const double shooterMotor1_I = 0.0;
    const double shooterMotor1_D = 0.0;
    const double shooterMotor1_F = (1023.0/40960.0);
    shooterMotor1->SetPID(shooterMotor1_P , shooterMotor1_I , shooterMotor1_D , shooterMotor1_F);
    shooterMotor1->SetControlMode(CANTalon::kPercentVbus);
    shooterMotor1->Set(0.0);

    shooterMotor2->SetFeedbackDevice(CANTalon::CtreMagEncoder_Relative);
    shooterMotor2->SetSensorDirection(false);
    shooterMotor2->ConfigNominalOutputVoltage(+0.0, -0.0);
    shooterMotor2->ConfigPeakOutputVoltage(+12.0,-12.0);
    shooterMotor2->SelectProfileSlot(0);
    const double shooterMotor2_P = 0.06;
    const double shooterMotor2_I = 0.0;
    const double shooterMotor2_D = 0.0;
    const double shooterMotor2_F = (1023.0/40960.0);
    shooterMotor2->SetPID(shooterMotor2_P , shooterMotor2_I , shooterMotor2_D , shooterMotor2_F);
    shooterMotor2->SetControlMode(CANTalon::kPercentVbus);
    shooterMotor2->Set(0.0);
    shooterMotor2->SetInverted(true);
    shooterMotor2->SetControlMode(CANTalon::kFollower);
    shooterMotor2->Set(11.0f);
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DefaultShooter());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

int Shooter::getPrepShooterSpeed(){
	return mprepShooterSpeed;
}

void Shooter::setPrepShooterSpeed(int inPrepShooterSpeed){
	mprepShooterSpeed = inPrepShooterSpeed;
}
